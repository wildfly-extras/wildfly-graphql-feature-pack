<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2019 Red Hat, Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>wildfly-microprofile-graphql-testsuite</artifactId>
        <groupId>org.wildfly.extras.graphql</groupId>
        <version>1.0.0.Beta3-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>wildfly-microprofile-graphql-tck</artifactId>
    <name>WildFly MicroProfile GraphQL - Server TCK</name>

    <properties>
        <maven.deploy.skip>true</maven.deploy.skip>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.graphql</groupId>
            <artifactId>microprofile-graphql-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.graphql</groupId>
            <artifactId>microprofile-graphql-tck</artifactId>
        </dependency>
        <dependency>
            <groupId>io.smallrye</groupId>
            <artifactId>smallrye-graphql-cdi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>jakarta.json</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jboss.galleon</groupId>
                <artifactId>galleon-maven-plugin</artifactId>
                <executions>
                    <!-- Provision a server with relevant layers -->
                    <execution>
                        <id>server-provisioning</id>
                        <goals>
                            <goal>provision</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <install-dir>${project.build.directory}/wildfly</install-dir>
                            <record-state>false</record-state>
                            <log-time>${galleon.log.time}</log-time>
                            <plugin-options>
                                <jboss-maven-dist/>
                                <jboss-fork-embedded>${galleon.fork.embedded}</jboss-fork-embedded>
                                <optional-packages>passive+</optional-packages>
                            </plugin-options>
                            <feature-packs>
                                <feature-pack>
                                    <transitive>true</transitive>
                                    <groupId>org.wildfly</groupId>
                                    <artifactId>wildfly-galleon-pack</artifactId>
                                    <version>${version.org.wildfly}</version>
                                    <inherit-packages>false</inherit-packages>
                                    <inherit-configs>false</inherit-configs>
                                </feature-pack>
                                <feature-pack>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>wildfly-microprofile-graphql-feature-pack</artifactId>
                                    <version>${project.version}</version>
                                    <inherit-packages>false</inherit-packages>
                                    <inherit-configs>false</inherit-configs>
                                </feature-pack>
                            </feature-packs>
                            <configurations>
                                <config>
                                    <model>standalone</model>
                                    <name>standalone.xml</name>
                                    <layers>
                                        <layer>jaxrs-server</layer>
                                        <layer>jmx-remoting</layer>
                                        <layer>observability</layer>
                                        <!-- Layers from this FP -->
                                        <layer>graphql</layer>
                                    </layers>
                                </config>
                            </configurations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <dependenciesToScan>
                        <dependency>org.eclipse.microprofile.graphql:microprofile-graphql-server-tck</dependency> <!-- 1.1-SNAPSHOT -->
                        <dependency>org.eclipse.microprofile.graphql:microprofile-graphql-tck</dependency> <!-- 1.0.x -->
                    </dependenciesToScan>
                    <systemPropertyVariables>
                        <jboss.install.dir>${jboss.dist}</jboss.install.dir>
                        <server.jvm.args>${server.jvm.args}</server.jvm.args>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>testng.xml</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </execution>
                    <!--
                        Normally we use only the main testng.xml suite which contains all tests. In the past, there have been
                        problems with having multiple GraphQL deployments in the same JVM, which led to failing TCK tests when
                        all tests were included in the same suite. For that reason, should anything like that happen again,
                        switching from default-test to the following separate executions with separate suite files can be used to work around this.
                        Each suite contains just one test, and each suite will run in a separate WildFly instance, therefore the
                        multiple deployment problem should not arise. I hope this won't ever be needed anymore, but keeping
                        it just to be sure.
                    -->
                    <!--<execution>
                        <id>SchemaDynamicValidityTest</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>testng-schema-dynamic-validity-test.xml</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ExecutionDynamicTest</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <suiteXmlFiles>
                                <suiteXmlFile>testng-execution-dynamic-test.xml</suiteXmlFile>
                            </suiteXmlFiles>
                        </configuration>
                    </execution>-->
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
